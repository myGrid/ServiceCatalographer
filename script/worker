#!/usr/bin/env ruby

# Based on: http://wiki.github.com/tobi/delayed_job/running-delayedworker-as-a-daemon,
# but modified by Jits.

require 'rubygems'
require 'daemons'
require 'optparse'
require 'pp'

app_dir = File.expand_path(File.join(File.dirname(__FILE__), '..'))

daemon_options = {
  :multiple => true,
  :dir_mode => :normal,
  :dir => File.join(app_dir, 'tmp', 'pids'),
  :backtrace => true,
  :log_output => true,
  :environment => 'production'
  
}

# Set the application environment
optparse = OptionParser.new do |opts|
  opts.on("-e", "--environment=[environment]", "rails environment") do |env|
  	daemon_options[:environment] = env
  end
end
optparse.parse!

#pp daemon_options

Daemons.run_proc('servicecatalographer_worker', daemon_options) do
  if ARGV.include?('--')
    ARGV.slice! 0..ARGV.index('--')
  else
    ARGV.clear
  end
  
  Dir.chdir app_dir

  # Should run in production mode by default.
  # So if you are testing locally (in development mode) then then you should pass
  # the environment variable as a command line option.
  # Example : script/worker start --environment=development
  Rails.env = ActiveSupport::StringInquirer.new(daemon_options[:environment])

  puts "Starting in Rails #{Rails.env} mode"

  require File.join('./config', 'environment')

  Delayed::Worker.new.start
end